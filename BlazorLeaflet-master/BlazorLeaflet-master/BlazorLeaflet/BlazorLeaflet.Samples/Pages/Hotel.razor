@page "/oteller"
@layout HotelLayout
@using Syncfusion.Blazor.Lists
@using BlazorLeaflet.Samples.Data
@inject HotelServices service
@using System.Drawing
@using BlazorLeaflet.Models
@inject CityService cityService
@inject IJSRuntime jsRuntime
@inject NavigationManager UriHelper



<div style="width: 400px; height: 400px;">
    <LeafletMap Map="_map" />
</div>

<div style="margin-bottom: 1%; margin-left: 7%;margin-top: 1%;">
    <SfButton CssClass="e-btn e-outline e-info" @onclick="UpdateMapMarker">Show Hotels</SfButton>
</div>


<div  style="margin-right:2%;">
    <div >
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th style="width:10px;"></th>
                    <th >NAME</th>
                    <th>PHONE</th>
                    <th>ACTIVITY AREA</th>
                    <th>CITY</th>
                    <th>DISTRICT</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (Hotels.Any())
                {
                    @foreach (var hotel in Hotels)
                    {
                        <tr>
                            <td>
                                <img style="height:110px; width:200px;" src="@hotel.image">
                            </td>
                            <td style="vertical-align:inherit; font-weight: bold;">@hotel.name</td>
                            <td style="vertical-align:inherit; font-weight: bold;">@hotel.phone</td>
                            <td style="vertical-align:inherit; font-weight: bold;">@hotel.activity_area</td>
                            <td style="vertical-align:inherit; font-weight: bold;">@hotel.city</td>
                            <td style="vertical-align:inherit;font-weight: bold;">@hotel.district</td>
                            <td style="padding-top:3.5%">
                                <SfButton CssClass="e-btn e-outline e-primary" @onclick="@Rezervasyon">RESERVATION</SfButton>
                            </td>

                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No hotel available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>

</div>

@code{
    private Map _map;
    List<Hotels> Hotels = new List<Hotels>();
    private async Task UpdateMapMarker()
    {
        Hotels = await service.GetHotelAsync();
        string tooltip_;
        if (Hotels.Any())
        {
            foreach (var hotel in Hotels)
            {
                var LatLng = new LatLng(float.Parse(hotel.Latitude.ToString()), float.Parse(hotel.Longitude.ToString()));
                if (hotel.ID.ToString() is null)
                {
                    tooltip_ = "not exists...";
                }
                else
                {

                    tooltip_ = hotel.name;
                }

                var marker = new Marker(LatLng)
                {

                    Draggable = true,
                    Title = hotel.name,
                    Popup = new Popup { Content = string.Format("I am at {0:0.00}° lat, {1:0.00}° lng", LatLng.Lat, LatLng.Lng) },
                    Tooltip = new Tooltip { Content = tooltip_ }


                };


                _map.AddLayer(marker);


            }
        }
    }

    private async Task RefreshHotel()
    {
        Hotels = await service.GetHotelAsync();
    }






    protected override async Task OnInitializedAsync()
    {
        await RefreshHotel();

        _map = new Map(jsRuntime)
        {
            Center = _startAt,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });

            _map.AddLayer(new Polygon
            {
                Shape = new[]
                { new[] { new PointF(37f, -109.05f), new PointF(41f, -109.03f), new PointF(41f, -102.05f), new PointF(37f, -102.04f) } },
                Fill = true,
                FillColor = Color.Blue,
                Popup = new Popup
                {
                    Content = "How are you doing,"
                }
            });





        };
    }

    private LatLng _startAt = new LatLng(47.5574007f, 16.3918687f);
    public string CityName { get; set; }


    private void FindCity()
    {

        var city = cityService.FindCity(CityName);
        if (city != null)
        {
            var marker = new Marker(city.Coordinates)
            {
                Icon = new Icon
                {
                    Url = city.CoatOfArmsImageUrl,
                    ClassName = "map-icon",
                },
                Tooltip = new Tooltip
                {
                    Content = city.Name,
                },
                Popup = new Popup
                {
                    Content = city.Description,
                }
            };

            _map.AddLayer(marker);
        }
    }

    private void ZoomMap()
    {
        _map.FitBounds(new PointF(45.943f, 24.967f), new PointF(46.943f, 25.967f), maxZoom: 5f);
    }

    private void PanToNY()
    {
        _map.PanTo(new PointF(40.713185f, -74.0072333f), animate: true, duration: 10f);
    }
    public void Rezervasyon()
    {
        UriHelper.NavigateTo("rezervasyon");
    }
}